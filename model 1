# model 1
import tensorflow as tf
from tensorflow.keras import layers, models
import matplotlib.pyplot as plt
import numpy as np

# Load CIFAR-10 dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.cifar10.load_data()

# Use only two classes: Class 0 (airplane) and Class 1 (automobile)
def filter_classes(x, y, classes):
    idx = np.isin(y, classes).flatten()
    x, y = x[idx], y[idx]
    y = np.where(y == classes[0], 0, 1)  # Convert to binary labels
    return x, y

# Small subset
x_train_small, y_train_small = filter_classes(x_train[:2000], y_train[:2000], [0, 1])
x_test_small, y_test_small = filter_classes(x_test[:1000], y_test[:1000], [0, 1])

# Normalize images
x_train_small = x_train_small / 255.0
x_test_small = x_test_small / 255.0

# Build the CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(128, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(512, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# Train the model with a small dataset
history_small = model.fit(x_train_small, y_train_small, epochs=20, validation_data=(x_test_small, y_test_small))

# Evaluate the model
test_loss_small, test_acc_small = model.evaluate(x_test_small, y_test_small)
print(f"Test accuracy with small dataset: {test_acc_small}")

# Plot the training and validation accuracy and loss
acc = history_small.history['accuracy']
val_acc = history_small.history['val_accuracy']
loss = history_small.history['loss']
val_loss = history_small.history['val_loss']

epochs = range(len(acc))

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs, acc, 'r', label='Training accuracy')
plt.plot(epochs, val_acc, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy (small dataset)')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and validation loss (small dataset)')
plt.legend()

plt.show()
